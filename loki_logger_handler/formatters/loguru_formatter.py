import traceback


class LoguruFormatter:
    """
    A custom formatter for log records generated by Loguru, formatting the record into a structured dictionary.
    """
    def __init__(self):
        pass

    def format(self, record):
        """
        Format a Loguru log record into a structured dictionary.

        Args:
            record (dict): The Loguru log record to format.

        Returns:
            dict: A dictionary representation of the log record.
        """
        formatted = {
            "message": record.get("message"),
            "timestamp": record.get("time").timestamp(),
            "process": record.get("process").id,
            "thread": record.get("thread").id,
            "function": record.get("function"),
            "module": record.get("module"),
            "name": record.get("name"),
            "level": record.get("level").name.upper(),
        }

        # Update with extra fields if available
        extra = record.get("extra", {})
        if isinstance(extra, dict):
            formatted.update(extra.get("extra", extra))

        # Check if the log level indicates an error (case-insensitive and can be partial)
        if formatted["level"].startswith("ER"):
            formatted["file"] = record.get("file").name
            formatted["path"] = record.get("file").path
            formatted["line"] = record.get("line")

            if record.get("exception"):
                exc_type, exc_value, exc_traceback = record.get("exception")
                formatted_traceback = traceback.format_exception(
                    exc_type, exc_value, exc_traceback
                )
                formatted["stacktrace"] = "".join(formatted_traceback)

        return formatted
